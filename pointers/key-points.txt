key points of pointers:-

1. Definition and Declaration:

A pointer is a variable that stores the memory address of another variable.
Declaration: int* ptr; where ptr is a pointer to an integer.

2. Address-of Operator (&):

The address-of operator (&) is used to obtain the memory address of a variable.
Example: int x = 10; int* ptr = &x; assigns the address of x to ptr.

3. Dereference Operator (*):

The dereference operator (*) is used to access the value at the memory address stored in the pointer.
Example: int y = *ptr; assigns the value pointed to by ptr to y.
4. Pointer Arithmetic:

Pointers can be incremented, decremented, and involved in arithmetic operations to traverse arrays or memory blocks.
Example: ptr++ moves the pointer to the next memory location for its type.
5. Null Pointer:

A null pointer is a pointer that does not point to any memory location. It is often used to indicate that the pointer is not assigned.
Declaration: int* ptr = nullptr;
6. Void Pointers:

A void pointer (void*) can hold the address of any data type and is used for generic pointer operations.
Example: void* ptr;
Pointers to Pointers:

Pointers can point to other pointers, allowing for multi-level indirection.
Declaration: int** ptr; which is a pointer to a pointer to an integer.
Dynamic Memory Allocation:

Pointers are used with dynamic memory allocation functions (new, delete, malloc, free) to allocate and deallocate memory at runtime.
Example: int* ptr = new int; delete ptr;
Function Pointers:

Pointers can point to functions, allowing functions to be passed as arguments and used in callback mechanisms.
Example: void (*funcPtr)(int) = &myFunction;
Pointers and Arrays:

An array name acts like a constant pointer to the first element of the array.
Example: int arr[5]; int* ptr = arr; where ptr now points to the first element of arr.
References vs. Pointers:

References are another way to refer to variables and are often safer and simpler than pointers. However, pointers provide more flexibility and control over memory.
Example of a reference: int& ref = x;
